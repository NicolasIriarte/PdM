* English
** Objective:
Implement a simple software module to work with the UART.

** Excercise
Implement a software module in a source file =API_uart.c= with its corresponding header file =API_uart.h= and place them in the project inside the folders =/drivers/API/src= and =/drivers/API/inc =, respectively.
In =API_uart.h= the prototypes of the public functions must be located.

#+begin_src C
   bool_t uartInit();
   void uartSendString(uint8_t * pstring);
   void uartSendStringSize(uint8_t * pstring, uint16_t size);
   void uartReceiveStringSize(uint8_t * pstring, uint16_t size);
#+end_src

In =API_uart.c= the prototypes of the private functions and the implementation of all module functions, private and public, must be located.
Implementation considerations:
1. =uartInit()= should perform all UART initialization. Additionally, it must print through the serial terminal a message with its configuration parameters.

    The function returns:
    - =true=: if the initialization is successful.
    - =false=: if the initialization is not successful.

2. =uartSendString(uint8_t *pstring)= receives a pointer to a string to be sent over the entire UART (up to the character =\0=) and must use the HAL function =HAL_UART_Transmit(...)= to transmit the string.
3. =uartSendStringSize(uint8_t * pstring, uint16_t size)= receives a pointer to a string to be sent via the UART and an integer with the number of characters to send. The function must use =HAL_UART_Transmit(...)= to transmit the string.


About the **[[file:~/Gits/CESE/PdM/PW4_Excercise1/README.org::*English][practice 4]]** exercise, implement a program that uses the uart module to inform the user when the rising and falling edges occur.
* Español
** Objetivo:
Implementar un módulo de software sencillo para trabajar con la UART.

** Consigna
Implementar un módulo de software en un archivos fuente =API_uart.c= con su correspondiente archivo de cabecera =API_uart.h= y ubicarlos en el proyecto dentro de  las carpetas =/drivers/API/src= y =/drivers/API/inc=, respectivamente.
En =API_uart.h= se deben ubicar los prototipos de las funciones públicas.

#+begin_src C
  bool_t uartInit();
  void uartSendString(uint8_t * pstring);
  void uartSendStringSize(uint8_t * pstring, uint16_t size);
  void uartReceiveStringSize(uint8_t * pstring, uint16_t size);
#+end_src


En =API_uart.c= se deben ubicar los prototipos de las funciones privadas y la implementación de todas las funciones de módulo, privadas y públicas.
Consideraciones para la implementación:
1. =uartInit()= debe realizar toda la inicialización de la UART.  Adicionalmente, debe imprimir por la terminal serie un mensaje con sus parámetros de configuración.

   La función devuelve:
   - =true=: si la inicialización es exitosa.
   - =false=: si la inicialización no es exitosa.

2. =uartSendString(uint8_t *pstring)= recibe un puntero a un string que se desea enviar por la UART completo (hasta el caracter =\0=) y debe utilizar la función de la HAL =HAL_UART_Transmit(...)= para transmitir el string.
3. =uartSendStringSize(uint8_t * pstring, uint16_t size)= recibe un puntero a un string que se desea enviar por la UART y un entero con la cantidad de caracteres que debe enviar. La función debe utilizar =HAL_UART_Transmit(...)= para transmitir el string.


Sobre el ejercicio de la **[[file:~/Gits/CESE/PdM/PW4_Excercise1/README.org::*English][práctica 4]]**, implementar un programa que utilice el módulo de uart para informar al usuario cuando se producen los flancos ascendente y descendente.
