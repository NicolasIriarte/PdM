* English
** Point 2
Create a new project as a copy of the project with the implementation of point 1 of practice 4.

Deploy a software module in a source file API_debounce.c with its corresponding header file =API_debounce.h= and place them in the project inside the folders =/drivers/API/src= and =/drivers/API/inc=, respectively.

In =API_debounce.h= the prototypes of the public functions and the declarations must be located:
#+begin_src C
   void debounceFSM_init();
   void debounceFSM_update();

   /* The readKey function should read an internal module variable and return true
    * or false if the key was pressed. If it returns true, you must reset (put
    * to false) the state of the variable.
    */
   bool_t readKey();
#+end_src

In =API_debounce.c= you must place the private declarations, the prototypes of the private functions and the implementation of all the functions of the module, private and public:

The declaration of debounceState_t must be private in the =.c= file and the state variable of type =debounceState_t= must be global private (with =static=).

Declare a private global =bool_t= variable that is set to true when a falling edge occurs and false when =readKey();= is called.

Implement a program that changes the toggle frequency of =LED2= between =100 ms= and =500 ms= each time the key is pressed. The program must use the debounce functions of the API_debounce module and the non-blocking delays of the API_delay module.

* Español
** Punto 2
Crear un nuevo proyecto como copia del proyecto con la implementación del punto 1 de la práctica 4.

Implementar un módulo de software en un archivos fuente API_debounce.c con su correspondiente archivo de cabecera =API_debounce.h= y ubicarlos en el proyecto dentro de  las carpetas =/drivers/API/src= y =/drivers/API/inc=, respectivamente.

En =API_debounce.h= se deben ubicar los prototipos de las funciones públicas y las declaraciones:
#+begin_src C
  void debounceFSM_init();
  void debounceFSM_update();

  /* La función readKey debe leer una variable interna del módulo y devolver true
   * o false si la tecla fue presionada.  Si devuelve true, debe resetear (poner
   * en false) el estado de la variable.
   */
  bool_t readKey();
#+end_src

En =API_debounce.c= se deben ubicar las declaraciones privadas, los prototipos de las funciones privadas y la implementación de todas las funciones del módulo, privadas y públicas:

La declaración de debounceState_t debe ser privada en el archivo =.c= y la variable de estado de tipo =debounceState_t= debe ser global privada (con =static=).

Declarar una variable tipo =bool_t= global privada que se ponga en true cuando ocurre un flanco descendente y se ponga en false cuando se llame a la función =readKey();=

Implementar un programa que cambie la frecuencia de toggleo del =LED2= entre =100 ms= y =500 ms= cada vez que se presione la tecla.  El programa debe usar las funciones anti-rebote del módulo API_debounce y los retardos no bloqueantes del módulo API_delay.
